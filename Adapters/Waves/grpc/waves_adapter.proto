syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.grpc.adapter.waves";
option java_outer_classname = "WavesAdapterProto";

package blockchain;

// The adapter service definition.
service Adapter {
    // getting last block
    rpc GetLastBlockHeight (BlockRequest) returns (BlockReply) {
    }
    // Generate address
    rpc GenerateAddress (EmptyRequest) returns (GenerateAddressReply) {
    }
    // Validate address
    rpc ValidateAddress (AddressRequest) returns (ValidateAddressReply) {
    }
    // Get transaction's fee
    rpc Fee (FeeRequest) returns (FeeReply) {
    }
    // Get account's balance
    rpc GetBalance (AddressRequest) returns (GetBalanceReply) {
    }
    // Get account's balance with assets balances
    rpc GetAllBalances (AddressRequest) returns (GetAllBalancesReply) {
    }
    // request to create raw transaction by senders's address
    rpc GetRawTransactionBySendersAddress (RawTransactionBySendersAddressRequest) returns (RawTransactionReply) {
    }
    // request to create raw transaction by senders's public key
    rpc GetRawTransaction (RawTransactionRequest) returns (RawTransactionReply) {
    }
    // Sing transaction with private key keeped in adapter
    rpc SignTransaction (SignTransactionRequest) returns (SignTransactionReply) {
    }
    // Sing transaction by private key in parameters
    rpc SignTransactionBySecretKey (SignTransactionBySecretKeyRequest) returns (SignTransactionReply) {
    }
    // Send transaction
    rpc SendTransaction (SendTransactionRequest) returns (SendTransactionReply) {
    }
    // Get transaction status
    rpc GetTransactionStatus (GetTransactionStatusRequest) returns (GetTransactionStatusReply) {
    }
    // Get transaction
    rpc TransactionByHash (TransactionByHashRequest) returns (TransactionByHashReply) {
    }
}

// The request message for getting last block
message BlockRequest {

}

// The response message containing last block number
message BlockReply {
    string block = 1;
}

// The request message for getting information by account address
message AddressRequest {
    string address = 1;
}

// empty request message
message EmptyRequest {

}

// fee request message
message FeeRequest {
    string sendersPublicKey = 1;
    string assetId = 2;
}

// The response message containing transaction's fee
message FeeReply {
    string fee = 1;
}

// The response message containing account's balance
message GetBalanceReply {
    string balance = 1;
}

// The response message containing account's balance with assets balances
message GetAllBalancesReply {
    message AssetBalance {
        string assetId = 1;
        string amount = 2;
    }

    string amount = 1;
    repeated AssetBalance assetBalances = 2;
}

// The response message containing generated address
message GenerateAddressReply {
    string address = 1;
}

// The response message containing result of address's validation
message ValidateAddressReply {
    bool valid = 1;
}

// The request message for raw transaction creation
message RawTransactionBySendersAddressRequest {
    string addressFrom = 1;
    string addressTo = 2;
    string amount = 3;
}

// The request message for raw transaction creation
message RawTransactionRequest {
    string addressFrom = 1;
    string sendersPublicKey = 2;
    string addressTo = 3;
    string amount = 4;
    string assetId = 5; // empty for WAVES
}

// The response message containing raw transaction
message RawTransactionReply {
    bytes tx = 1;
}

// The request message for singing transaction
message SignTransactionRequest {
    string senderAddress = 1;
    bytes tx = 2;
}

// The request message for singing transaction by private key in parameters
message SignTransactionBySecretKeyRequest {
    string senderSecretKey = 1;
    bytes tx = 2;
}

// The response message containing signed transaction
message SignTransactionReply {
    bytes tx = 1;
    string txHash = 2;
}

// The request message for singing transaction
message SendTransactionRequest {
    bytes tx = 1;
}

// The response message containing transaction's id
message SendTransactionReply {
    string txId = 1;
}

// The request message for getting transaction's status containing tx id
message GetTransactionStatusRequest {
    string txId = 1;
}

// The response message containing transaction's status: UNKNOWN, PENDING, SUCCESS
message GetTransactionStatusReply {
    string status = 1;
}

// The request message for getting transaction by hash
message TransactionByHashRequest {
    string txHash = 1;
}

// The response message for getting transaction by hash
message TransactionByHashReply {
    string senderAddress = 1;
    string sendersPublicKey = 2;
    string recipientAddress = 3;
    string amount = 4;
    string assetId = 5;
    string txHash = 6;
    string fee = 7;
    bytes data = 8;
    string status = 9;
    repeated InputOutput inputs = 10;
    repeated InputOutput outputs = 11;
    string assetAmount = 12;
}

message InputOutput {
    string address = 1;
    string amount = 2;
}
