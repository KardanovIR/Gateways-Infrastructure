// Code generated by protoc-gen-go. DO NOT EDIT.
// source: waves_adapter.proto

package wavesAdapter

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the user's name.
type BlockRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockRequest) Reset()         { *m = BlockRequest{} }
func (m *BlockRequest) String() string { return proto.CompactTextString(m) }
func (*BlockRequest) ProtoMessage()    {}
func (*BlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_waves_adapter_326fbd1a0b059866, []int{0}
}
func (m *BlockRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockRequest.Unmarshal(m, b)
}
func (m *BlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockRequest.Marshal(b, m, deterministic)
}
func (dst *BlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockRequest.Merge(dst, src)
}
func (m *BlockRequest) XXX_Size() int {
	return xxx_messageInfo_BlockRequest.Size(m)
}
func (m *BlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BlockRequest proto.InternalMessageInfo

// The response message containing the greetings
type BlockReply struct {
	Block                string   `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockReply) Reset()         { *m = BlockReply{} }
func (m *BlockReply) String() string { return proto.CompactTextString(m) }
func (*BlockReply) ProtoMessage()    {}
func (*BlockReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_waves_adapter_326fbd1a0b059866, []int{1}
}
func (m *BlockReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockReply.Unmarshal(m, b)
}
func (m *BlockReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockReply.Marshal(b, m, deterministic)
}
func (dst *BlockReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockReply.Merge(dst, src)
}
func (m *BlockReply) XXX_Size() int {
	return xxx_messageInfo_BlockReply.Size(m)
}
func (m *BlockReply) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockReply.DiscardUnknown(m)
}

var xxx_messageInfo_BlockReply proto.InternalMessageInfo

func (m *BlockReply) GetBlock() string {
	if m != nil {
		return m.Block
	}
	return ""
}

func init() {
	proto.RegisterType((*BlockRequest)(nil), "wavesAdapter.BlockRequest")
	proto.RegisterType((*BlockReply)(nil), "wavesAdapter.BlockReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CommonClient is the client API for Common service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommonClient interface {
	// Sends a greeting
	GetLastBlockHeight(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*BlockReply, error)
}

type commonClient struct {
	cc *grpc.ClientConn
}

func NewCommonClient(cc *grpc.ClientConn) CommonClient {
	return &commonClient{cc}
}

func (c *commonClient) GetLastBlockHeight(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*BlockReply, error) {
	out := new(BlockReply)
	err := c.cc.Invoke(ctx, "/wavesAdapter.Common/GetLastBlockHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommonServer is the server API for Common service.
type CommonServer interface {
	// Sends a greeting
	GetLastBlockHeight(context.Context, *BlockRequest) (*BlockReply, error)
}

func RegisterCommonServer(s *grpc.Server, srv CommonServer) {
	s.RegisterService(&_Common_serviceDesc, srv)
}

func _Common_GetLastBlockHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServer).GetLastBlockHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wavesAdapter.Common/GetLastBlockHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServer).GetLastBlockHeight(ctx, req.(*BlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Common_serviceDesc = grpc.ServiceDesc{
	ServiceName: "wavesAdapter.Common",
	HandlerType: (*CommonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLastBlockHeight",
			Handler:    _Common_GetLastBlockHeight_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "waves_adapter.proto",
}

func init() { proto.RegisterFile("waves_adapter.proto", fileDescriptor_waves_adapter_326fbd1a0b059866) }

var fileDescriptor_waves_adapter_326fbd1a0b059866 = []byte{
	// 171 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2e, 0x4f, 0x2c, 0x4b,
	0x2d, 0x8e, 0x4f, 0x4c, 0x49, 0x2c, 0x28, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0xe2, 0x01, 0x0b, 0x3a, 0x42, 0xc4, 0x94, 0xf8, 0xb8, 0x78, 0x9c, 0x72, 0xf2, 0x93, 0xb3, 0x83,
	0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x94, 0x94, 0xb8, 0xb8, 0xa0, 0xfc, 0x82, 0x9c, 0x4a, 0x21,
	0x11, 0x2e, 0xd6, 0x24, 0x10, 0x4f, 0x82, 0x51, 0x81, 0x51, 0x83, 0x33, 0x08, 0xc2, 0x31, 0x0a,
	0xe3, 0x62, 0x73, 0xce, 0xcf, 0xcd, 0xcd, 0xcf, 0x13, 0xf2, 0xe1, 0x12, 0x72, 0x4f, 0x2d, 0xf1,
	0x49, 0x2c, 0x2e, 0x01, 0x6b, 0xf2, 0x48, 0xcd, 0x4c, 0xcf, 0x28, 0x11, 0x92, 0xd2, 0x43, 0xb6,
	0x42, 0x0f, 0xd9, 0x7c, 0x29, 0x09, 0xac, 0x72, 0x05, 0x39, 0x95, 0x4a, 0x0c, 0x4e, 0x3a, 0x5c,
	0xa2, 0x99, 0xf9, 0x7a, 0xe9, 0x45, 0x05, 0xc9, 0x7a, 0x30, 0x27, 0x83, 0x15, 0x3b, 0x09, 0x86,
	0x23, 0xe9, 0x09, 0x00, 0xf9, 0x22, 0x80, 0x31, 0x89, 0x0d, 0xec, 0x1d, 0x63, 0x40, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x66, 0xce, 0x4b, 0x51, 0xe5, 0x00, 0x00, 0x00,
}
